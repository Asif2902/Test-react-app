{"version":3,"file":"static/js/6246.25c04f08.chunk.js","mappings":"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","sources":["../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/@noble/hashes/src/_u64.ts","../node_modules/@noble/hashes/src/sha3.ts","../node_modules/@noble/hashes/src/crypto.ts","../node_modules/@noble/hashes/src/utils.ts"],"sourcesContent":["function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number) => l;\nconst rotr32L = (h: number, _l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    exists(this, false);\n    bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n"],"names":["number","n","Number","isSafeInteger","Error","bytes","b","Uint8Array","_len","arguments","length","lengths","Array","_key","includes","hash","create","outputLen","blockLen","exists","instance","checkFinished","undefined","destroyed","finished","output","out","min","SHA2","Hash","constructor","padOffset","isLE","super","pos","this","buffer","view","createView","update","data","len","toBytes","take","Math","set","subarray","process","dataView","roundClean","digestInto","fill","i","byteOffset","value","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","digest","res","slice","destroy","_cloneInto","to","Maj","a","c","SHA256_K","Uint32Array","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","rotr","s1","T1","T2","Chi","sha256","wrapConstructor","U32_MASK64","fromBig","split","lst","le","Ah","Al","rotlSH","s","rotlSL","rotlBH","rotlBL","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","push","t","j","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","u32","keccak","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","keccakP","finish","writeInto","bufferOut","xofInto","xof","gen","keccak_256","crypto","globalThis","u8a","arr","floor","byteLength","DataView","word","str","TextEncoder","encode","utf8ToBytes","concatBytes","arrays","r","reduce","sum","pad","forEach","clone","hashCons","hashC","msg","tmp","randomBytes","bytesLength","getRandomValues"],"sourceRoot":""}